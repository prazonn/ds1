1)STACK USING ARRAY

#include<stdio.h>
#include<stdlib.h>
int n,top=-1,*stack;
void push(int x)
{
if(top==n)
return;
stack[++top]=x;
}
int pop()
{
if(top==-1)
return -1;
return stack[top--];
}
int peek()
{
if(top==-1)
return -1;
return stack[top];
}
void display()
{
for(int i=top;i>=-1;i--)
printf("%d",stack[i]);
printf("\n\n");
}
int main()
{
n=10;
printf("Initializing the size as 10 \n\n");
stack=(int*)malloc(n*sizeof(int));
printf("Push elements \n 1 \n 2 \n 3 in the stack");
push(1);
push(2);
push(3);
printf("display the elements : ");
display();
printf("The top element of stack = %d\n\n",peek());
printf("pop the top  element of stack = %d\n\n ",pop());
printf("pop the top  element of stack = %d\n\n ",pop());
printf("Display the elements of the stack ");
display();
return 0;
}



2)INFIX TO POSTFIX


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>
#define max_size 100
int precedence(char operator)
{
switch(operator)
{
case '+':
case '-':
return 1;
case '*':
case '/':
return 2;
case '^':
return 3;
default:
return -1;
}
}
int isoperator(char ch)
{
return(ch=='+' || ch=='-' || ch=='*' || ch=='/' || ch=='^' );
}
char *infixtopostfix(char*infix)
{
int i,j;
int len =strlen(infix);
char *postfix=(char*)malloc(sizeof(char)*(len+2));
char stack[max_size];
int top=-1;
for(i=0,j=0;i< len ;i++)
{
if(infix[i]== ' ' || infix[i]== '\t')
continue;
if(isalnum(infix[i]))
{
postfix[j++]=infix[i];
}
else if (infix[i]=='(')
{
stack[++top]=infix[i];
}
else if (infix[i]==')')
{
while(top>-1 && stack[top] !='(')
postfix[j++]=stack[top--];
if(top>-1 && stack[top] !='(')
return "Invalid expression";
else
top--;
}
else if (isoperator(infix[i]))
{
while(top>-1&& precedence(stack[top])>=precedence(infix[i]))
postfix[j++]=stack[top--];
stack[++top]=infix[i];
}
}

while(top>-1)
{
if (stack[top]=='(')
{
return " invalid expression";
}
postfix[j++]=stack[top--];
}
postfix[j]='\0';
return postfix;
}
int main ()
{
char infix[max_size]="a+b(c^d-e)^(f+g*h)-i";
char*postfix=infixtopostfix(infix);
printf("%s\n",postfix);
free(postfix);
return 0;
}



3)SELECTION SORT

#include<stdio.h>

void swap(int *xp,int *yp)
{
int temp=*xp;
*xp=*yp;
*yp=temp;
}
void selectionSort(int arr[],int n)
{
int i,j,min_idx;
for(i=0;i<n-1;i++)
{
min_idx=i;
for(j=i+1;j<n;j++)

if(arr[j]<arr[min_idx])
min_idx=j;
swap(&arr[min_idx],&arr[i]);
}
}

void printArray(int arr[],int size)
{
int i;
for(i=0;i<size;i++)
{
printf("%d",arr[i]);
printf("\n");
}
}

int main()
{
int arr[]={64,25,45,2,11};
int n=sizeof(arr)/sizeof(arr[0]);
selectionSort(arr,n);
printf("Print sorted array :  ");
printArray(arr,n);
return 0;
}


4)LINEAR QUEUE USING ADT USING ARRAY

#include<stdio.h>
#include<stdio.h>
#include<conio.h>
#define n 5
int main()
{
int queue[n], i,j=1,front=0,rear=0,ch=1,x=n,c;
printf("Queue using array : ");
printf("\n1.Insertion \n2.deletion \n3.display \n4.Exit");
while(ch)
{
printf("Enter the choice : ");
scanf("%d",&ch);
switch(ch)
{
case 1:
if(rear==x)
printf("\nQueue is full");
else
{
printf("\nEnter the no %d : ",j++);
scanf("%d",&queue[rear++]);
}
break;

case 2:
if(front==rear)
{
printf("Queue is empty");
}
else
{
printf("The deleted element is %d  ",queue[front++]);
x++;
}
break;

case 3:
printf("Queue elements are : ");
if(front==rear)
{
printf("Queue is empty");
}
else
{
for(i=front;i<rear;i++)
{
printf("%d",queue[i]);
printf("\n");
}

break;
case 4:
break;

default:
printf("Invalid choice ");
}
}
}
return 0;
}


5)DEQUE OF CIRCULAR QUEUE USING ARRAY
                 
#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

// Structure for Circular Queue
struct CircularQueue {
    int front, rear;
    int data[MAX_SIZE];
};

// Function to initialize the Circular Queue
void initializeQueue(struct CircularQueue *cq) {
    cq->front = cq->rear = -1;
}

// Function to check if the Circular Queue is empty
int isEmpty(struct CircularQueue *cq) {
    return (cq->front == -1 && cq->rear == -1);
}

// Function to check if the Circular Queue is full
int isFull(struct CircularQueue *cq) {
    return (cq->rear + 1) % MAX_SIZE == cq->front;
}

// Function to insert an element at the rear of the Circular Queue
void enqueueRear(struct CircularQueue *cq, int value) {
    if (isFull(cq)) {
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }

    if (isEmpty(cq)) {
        cq->front = cq->rear = 0;
    } else {
        cq->rear = (cq->rear + 1) % MAX_SIZE;
    }

    cq->data[cq->rear] = value;
    printf("Enqueued %d to the rear.\n", value);
}

// Function to insert an element at the front of the Circular Queue
void enqueueFront(struct CircularQueue *cq, int value) {
    if (isFull(cq)) {
        printf("Queue is full. Cannot enqueue.\n");
        return;
    }

    if (isEmpty(cq)) {
        cq->front = cq->rear = 0;
    } else {
        cq->front = (cq->front - 1 + MAX_SIZE) % MAX_SIZE;
    }

    cq->data[cq->front] = value;
    printf("Enqueued %d to the front.\n", value);
}

// Function to delete an element from the front of the Circular Queue
void dequeueFront(struct CircularQueue *cq) {
    if (isEmpty(cq)) {
        printf("Queue is empty. Cannot dequeue.\n");
        return;
    }

    printf("Dequeued %d from the front.\n", cq->data[cq->front]);

    if (cq->front == cq->rear) {
        initializeQueue(cq);
    } else {
        cq->front = (cq->front + 1) % MAX_SIZE;
    }
}

// Function to delete an element from the rear of the Circular Queue
void dequeueRear(struct CircularQueue *cq) {
    if (isEmpty(cq)) {
        printf("Queue is empty. Cannot dequeue.\n");
        return;
    }

    printf("Dequeued %d from the rear.\n", cq->data[cq->rear]);

    if (cq->front == cq->rear) {
        initializeQueue(cq);
    } else {
        cq->rear = (cq->rear - 1 + MAX_SIZE) % MAX_SIZE;
    }
}

// Function to display the elements of the Circular Queue
void displayQueue(struct CircularQueue *cq) {
    if (isEmpty(cq)) {
        printf("Queue is empty.\n");
        return;
    }

    printf("Circular Queue: ");
    int i = cq->front;
    do {
        printf("%d ", cq->data[i]);
        i = (i + 1) % MAX_SIZE;
    } while (i != (cq->rear + 1) % MAX_SIZE);
    printf("\n");
}

int main() {
    struct CircularQueue cq;
    initializeQueue(&cq);

    enqueueRear(&cq, 1);
    enqueueRear(&cq, 2);
    enqueueFront(&cq, 0);
    displayQueue(&cq);

    dequeueFront(&cq);
    displayQueue(&cq);

    enqueueFront(&cq, -1);
    enqueueRear(&cq, 3);
    displayQueue(&cq);

    dequeueRear(&cq);
    displayQueue(&cq);

    return 0;
}






6)LINKED LIST

#include<stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node *next;
};

struct node *createnode(int data) {
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = data;
    newnode->next = NULL;
    return newnode;
}

void insertAtBeginning(struct node **head, int data) {
    struct node *newnode = createnode(data);
    newnode->next = *head;
    *head = newnode;
}

void insertAtEnd(struct node **head, int data) {
    struct node *newnode = createnode(data);
    if (*head == NULL) {
        *head = newnode;
    } else {
        struct node *current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newnode;
    }
}

void insertAtMiddle(struct node **head, int data) {
    struct node *newnode = createnode(data);
    if (*head == NULL) {
        *head = newnode;
    } else {
        struct node *slow = *head;
        struct node *fast = (*head)->next;
        while (fast != NULL && fast->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
        }
        newnode->next = slow->next;
        slow->next = newnode;
    }
}

void deleteNode(struct node **head, int data) {
    if (*head == NULL) {
        return;
    }

    if ((*head)->data == data) {
        struct node *temp = *head;
        *head = (*head)->next;
        free(temp);
        return;
    }

    struct node *current = *head;
    struct node *prev = NULL;

    while (current != NULL && current->data != data) {
        prev = current;
        current = current->next;
    }

    if (current == NULL) {
        // Data not found
        return;
    }

    prev->next = current->next;
    free(current);
}

void printList(struct node *head) {
    struct node *current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    struct node *head = NULL;

    insertAtBeginning(&head, 1);
    insertAtEnd(&head, 3);
    insertAtBeginning(&head, 0);
    insertAtMiddle(&head, 2);

    printf("Linked List after initial insertion: ");
    printList(head);

    deleteNode(&head, 2);
    printf("Linked list after deletion: ");
    printList(head);

    insertAtEnd(&head, 4);
    insertAtBeginning(&head, -1);

    printf("Linked list after additional insertion: ");
    printList(head);

    // Free memory
    while (head != NULL) {
        struct node *temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}



















7) INORDER AND PREORDER TRAVERSALS

#include<stdio.h>
#include<stdlib.h>
 struct node{
char data;
struct node* left ;
struct node*right;
};
int search(char arr[],int strt,int end,char value);
struct node*newnode(char data);
struct node*buildTree(char in[],char pre[],int instrt,int inEnd)
{
static int preIndex=0;
if(instrt>inEnd)
return NULL;
struct node*tnode=newnode(pre[preIndex++]);
if(instrt==inEnd)
return tnode;
int inIndex=search(in,instrt,inEnd,tnode->data);
tnode->left=buildTree(in,pre,instrt,inIndex-1);
tnode->right=buildTree(in,pre,inIndex+1,inEnd);
return tnode;
}
int search(char arr[],int strt,int end,char value)
{
int i;
for(i=strt;i<=end;i++)
{
if(arr[i]==value)
return i;
}
}
struct node*newnode(char data)
{
struct node *node=(struct node*)malloc(sizeof(struct node));
node->data=data;
node->left=NULL;
node->right=NULL;
return (node);
}
 void printInorder(struct node*node)
{
if(node==NULL)
return;
printInorder(node->left);
printf("%c",node->data);
printInorder(node->right);
}
int main()
{
char in[]={'D','B','E','A','F','C'};
char pre[]={'A','B','D','E','C','F'};
int len=sizeof(in)/sizeof(in[0]);
struct node*root=buildTree(in,pre,0,len-1);
printf("Inorder Traversal of the constructed tree is \n\n ");
printInorder(root);
getchar();
}


8)BFS TRAVERSAL
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define max_vertices 50

typedef struct graph_t {
    int v;
    bool adj[max_vertices][max_vertices];
} graph;

graph* graph_create(int v) {
    graph *g = (graph*)malloc(sizeof(graph));
    g->v = v;
    for (int i = 0; i < v; i++) {
        for (int j = 0; j < v; j++) {
            g->adj[i][j] = false;
        }
    }
    return g;
}

void graph_destroy(graph* g) {
    free(g);
}

void graph_edge(graph* g, int v, int w) {
    g->adj[v][w] = true;  // Fix: Change false to true to correctly represent an edge
}

void graph_bfs(graph* g, int s) {
    bool visited[max_vertices];
    for (int i = 0; i < g->v; i++) {
        visited[i] = false;
    }

    int queue[max_vertices];
    int front = 0, rear = 0;
    visited[s] = true;
    queue[rear++] = s;

    while (front != rear) {
        s = queue[front++];
        printf("%d ", s);

        for (int adjacent = 0; adjacent < g->v; adjacent++) {
            if (g->adj[s][adjacent] && !visited[adjacent]) {
                visited[adjacent] = true;
                queue[rear++] = adjacent;
            }
        }
    }
}

int main() {
    graph* g = graph_create(4);
    graph_edge(g, 0, 1);
    graph_edge(g, 0, 2);
    graph_edge(g, 1, 2);
    graph_edge(g, 2, 0);
    graph_edge(g, 2, 3);
    graph_edge(g, 3, 3);

    printf("Following BFS traversal from vertex 2: ");
    graph_bfs(g, 2);

    graph_destroy(g);
    return 0;
}


